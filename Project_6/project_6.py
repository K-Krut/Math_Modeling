import math

definition = {
    'lamda': 'Вхідні дані: λ',
    'mya': 'Вхідні дані: μ',
    'p0': 'Граничні ймовірності: p0',
    'p1': 'Граничні ймовірності: p1',
    'Рv': 'Ймовірність відмови: Р(відм)',
    'Q': 'Відносна пропускна ймовірність: Q',
    'A': 'Абсолютна пропускна здатність: A',
    't_obs': 'Середній час обслуговування: t(обс)',
    't_lamda': 'Середній час простою каналу: t(λ)'
}


def output(res):
    return f"{res['name']}\n" + '\n'.join(
        [f"{definition[i[0]]} = {round(i[1], 3)}" for i in res['values'].items()]) + '\n\n'


def single_channel_rejection(lamda, myu):
    # граничні ймовірності
    p0 = myu / (lamda + myu)  # ймовірність обслуговування вимоги, оскільки канал є вільним,
    p1 = lamda / (lamda + myu)  # ймовірність відмови, оскільки канал зайнятий обслуговуванням попередньої вимоги
    Absolute = lamda * p0  # абсолютна пропускна здатність
    t_lamda = 1.0 / lamda  # середній інтервал часу між надходженнями двох замовлень
    t_obslogov = 1.0 / myu  # середній час обслуговування каналом одного замовлення
    return {'name': dict_cmo['scr']['name'],
            'values': {"lamda": lamda, "mya": myu, "p0": p0, "p1": p1, "Рv": p1, "Q": p0, "A": Absolute,
                       "t_obs": t_obslogov,
                       "t_lamda": t_lamda}}


def multi_channel_rejection(lamda, mya, n):
    r = lamda / mya
    p0_sum = 1
    r_array = []
    for i in range(n):
        temp = r ** (i + 1) / math.factorial(i + 1)
        r_array.append(temp)
        p0_sum += temp
    p0 = 1.0 / p0_sum
    p_array = []
    for el in r_array:
        p_array.append(el * p0)
    P_vidm = p_array[-1]
    Q = 1 - P_vidm
    A = Q * lamda
    k = r * (1 - P_vidm)
    return output('m_channel_rejection', [lamda, mya, n, r, p0, p_array, P_vidm, Q, A, k])


dict_cmo = {
    'scr': {
        "func": single_channel_rejection,
        "name": "Розв'язання задачі з одноканальною СМО з відмовами"
    },
}

"""
Задача 1

Розглядається робота майстерні по ремонту взуття, в якій працює одна людина. 
В середньому майстер виконує замовлення протягом 30 хв. 
Поруч з ним розташоване одне крісло, в якому замовник очікує замовлення. 
Майстер не має постійних замовників, і клієнти приходять до нього незалежно один від одного в середньому кожні 40 хв. 
Клієнти – народ нетерплячий, тому в разі зайнятості майстра йдуть до іншого. 

Визначити граничну імовірність станів і характеристики обслуговування СМО:
- відносної пропускної здатності;
- абсолютної пропускної здатності;
- ймовірності відмов;
"""

lamda_1 = 0.025
mya_1 = 0.033
print('Задача 1')
print(output(dict_cmo['scr']['func'](lamda_1, mya_1)))

"""
Задача 2

Розглянемо телефонну лінію, на вхід якої надходить простий потік дзвінків з інтенсивністю λ=0,4 дзвінки/хв. 
Середня тривалість розмови становить 3 хв. 
Час розмови має показниковий закон розподілу. Знайти граничні ймовірності станів системи та характеристики обслуговування:
- відносної пропускної здатності;
- абсолютної пропускної здатності;
- ймовірності відмов;
- середній час обслуговування одного дзвінка; 
- середній час простою лінії. 
"""

lamda_2 = 0.4
mya_2 = 0.333
print('Задача 2')
print(output(dict_cmo['scr']['func'](lamda_2, mya_2)))

"""
Задача 3

У магазині «Смаколики» є одна каса для обслуговування. Покупці прибувають згідно пуассонівського розподілу з
інтенсивністю n людей/год. Середній час обслуговування однієї людини становить (1+n) хвилин.

Визначити граничні значення ймовірностей та показники ефективності роботи магазину:
- відносну пропускну здатність;
- абсолютну пропускну здатність;
- ймовірність відмов;
- середній час обслуговування одного автомобіля;
- середній час простою блоку.

Порівняти фактичну пропускну здатність магазину з номінальною, котра
була б, якби кожен покупець обслуговувався точно (1+n) хвилин і автомобілі
надходили один за одним без перерви. Проаналізувати, як будуть змінюватись
характеристики системи Pвідм, Q, A від t – середнього часу обслуговування
одного покупця, якщо значення t змінювати кожні 2 хвилини на проміжку від
(1+n) хв до (11+n) хв. Дані представити у вигляді таблиць. Зробити висновки.


n = 2
"""

lamda_3 = 2
mya_3 = 20
print('Задача 3')
print(output(dict_cmo['scr']['func'](lamda_3, mya_3)))
